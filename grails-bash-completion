#
# Copyright (c) 2013 Jeremy Michael Crosbie.
#

_plugin_scripts() {
		local extras e tmp search_dirs
		[ -d $HOME/.grails/scripts ] && search_dirs="$search_dirs $HOME/.grails/scripts"
		[ -d ./plugins ] && search_dirs="$search_dirs ./plugins"
		[ -d $GRAILS_HOME/scripts ] && search_dirs="$search_dirs $GRAILS_HOME/scripts"

		if [ -e grails-app ]; then
				extras=$(find $search_dirs -regex '.*/scripts/[A-Za-a].*\.groovy' -exec basename {} \; | cut -d . -f 1)
		fi

		extras=$(echo $extras | sed -e 's/\([A-Z]\)/-\1/g' -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' -e 's/^-//' -e 's/\([^A-Za-z0-9]\)-/\1/g' -e 's/_//g')

		EXTRAS="$EXTRAS $extras"
}

#
# If this is a plugin then see if the release plugin is being used and add
# known targets.  Not the greatest but the best we can do right now
#
_detect_plugin() {
		if [ -f ./grails-app/conf/BuildConfig.groovy ]; then
				grep -q ':release:' ./grails-app/conf/BuildConfig.groovy &&	EXTRAS="$EXTRAS publish-plugin generate-pom maven-deploy maven-install"
		fi
}

_grails() {
		local cur prev opts targets envs
		EXTRAS=
    COMPREPLY=()
		_get_comp_words_by_ref cur prev

		opts="-verbose -plain-output -refresh-dependencies -reloading -stacktrace -offline -version -non-interactive"

		_plugin_scripts
		_detect_plugin

		targets="$targets $EXTRAS"
		envs="dev prod test"

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        return 0
		else
				case "${prev}" in
						dev|prod|test)
								COMPREPLY=($(compgen -W "${opts} ${targets}" -- ${cur}))
								;;
						-*)
								COMPREPLY=($(compgen -W "${targets}" -- ${cur}))
								;;
						*)
								COMPREPLY=($(compgen -W "${envs} ${opts} ${targets}" -- ${cur}))
								;;
				esac
		fi
} &&
complete -F _grails grails
